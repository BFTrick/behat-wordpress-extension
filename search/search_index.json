{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Welcome! WordHat is an integration layer between \nBehat\n and \nWordPress\n. It provides WordPress-specific functionality for common testing scenarios specific to WordPress sites.\n\n\nIf you are new to the project or Behat, we recommend that you first read through our documentation. If you already know Behat, WordHat is available on \nComposer\n.\n\n\nIf you encounter a bug, have a suggestion, or would like to help the project grow, please get in contact via \nGithub\n or our \nSlack\n.\n\n\nWhat is Behat?\n\n\nBehat allow you to describe the behavior of a website in plain \n but stylised \n language, and then turn that description into an automated test that will visit the site and perform each step you describe.\n\n\nSuch functional tests can help site builders ensure that the added value they have created while building a WordPress site continues to behave as expected, after any sort of site change: WordPress updates, new plugins, new features, and so on.\n\n\nGet started!", 
            "title": "Introduction"
        }, 
        {
            "location": "/index.html#what-is-behat", 
            "text": "Behat allow you to describe the behavior of a website in plain   but stylised   language, and then turn that description into an automated test that will visit the site and perform each step you describe.  Such functional tests can help site builders ensure that the added value they have created while building a WordPress site continues to behave as expected, after any sort of site change: WordPress updates, new plugins, new features, and so on.  Get started!", 
            "title": "What is Behat?"
        }, 
        {
            "location": "/getting-started/installation/index.html", 
            "text": "Installing WordHat\n\n\nRequirements\n\n\nWordHat requires \nPHP\n (version 7.0+), \nComposer\n, and a \nWordPress\n site to test (version 4.8+).\n\n\nWe strongly recommend using \nWP-CLI\n1\n (version 1.3.0+), and \nSelenium\n2\n to help with browser automation. Selenium is fiddly to set up, so we recommend using \nvvo/selenium-standalone\n, which requires the \nJava Platform JDK\n.\n\n\nInstallation\n\n\n\n\n\nCreate a folder for your tests. From a terminal:\n    \nmkdir project\ncd project\n\n\n\n\n\nTell \nComposer\n to download WordHat:\n    \ncomposer require --dev paulgibbs/behat-wordpress-extension behat/mink-goutte-driver behat/mink-selenium2-driver\n\n\n\n\n\nCopy WordHat's sample configuration file into your \nproject\n folder and rename it:\n    \ncp vendor/paulgibbs/behat-wordpress-extension/behat.yml.dist behat.yml\n\n\n\n\n\nEdit your \nbehat.yml\n and: \nUpdate the \nbase_url\n setting with the URL of the website that you intend to test.\n\n\nUpdate the \npath\n setting with either the relative or absolute path to your WordPress' files.\n\n\nIf your WordPress is installed in a subdirectory, \nconsult the FAQ for information about the \nsite_url\n setting\n.\n\n\n\n\n\nInitialise \nBehat\n:\n    \nvendor/bin/behat --init\n\n\n    \n\n        \nWhat does this do?\n\n        \nThis creates a \nfeatures/\n folder for your \nFeatures (tests)\n, and a new \nContext class\n. These will come in handy later!\n\n    \n\n\n\n\n\nTo confirm that everything is set up correctly, run:\n    \nvendor/bin/behat -dl\n\n    If it worked, you will see a list of text that looks a little like the following (but much longer):\n    \nGiven I am an anonymous user\nGiven I am not logged in\nGiven I am logged in as a user with the :role role(s)\nGiven I am logged in as :name\n\n\n\n\n\n\n\n\n\nNext steps\n\n\nNow that you have WordHat set up, we recommend reading our \nintroduction to Behat\n to help you learn the basics before you start writing tests for your site.\n\n\n\n\n\n\n\n\n\n\nThe WP-CLI executable \nmust\n be named \nwp\n and be within your system\ns \n$PATH\n.\n\n\n\n\n\n\nSelenium is recommended for testing \nwebsites that require Javascript\n. Behat requires the \nMink Selenium2 library\n, which we include in the installation instructions above.", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/installation/index.html#installing-wordhat", 
            "text": "", 
            "title": "Installing WordHat"
        }, 
        {
            "location": "/getting-started/installation/index.html#requirements", 
            "text": "WordHat requires  PHP  (version 7.0+),  Composer , and a  WordPress  site to test (version 4.8+).  We strongly recommend using  WP-CLI 1  (version 1.3.0+), and  Selenium 2  to help with browser automation. Selenium is fiddly to set up, so we recommend using  vvo/selenium-standalone , which requires the  Java Platform JDK .", 
            "title": "Requirements"
        }, 
        {
            "location": "/getting-started/installation/index.html#installation", 
            "text": "Create a folder for your tests. From a terminal:\n     mkdir project\ncd project   Tell  Composer  to download WordHat:\n     composer require --dev paulgibbs/behat-wordpress-extension behat/mink-goutte-driver behat/mink-selenium2-driver   Copy WordHat's sample configuration file into your  project  folder and rename it:\n     cp vendor/paulgibbs/behat-wordpress-extension/behat.yml.dist behat.yml   Edit your  behat.yml  and:  Update the  base_url  setting with the URL of the website that you intend to test.  Update the  path  setting with either the relative or absolute path to your WordPress' files.  If your WordPress is installed in a subdirectory,  consult the FAQ for information about the  site_url  setting .   Initialise  Behat :\n     vendor/bin/behat --init \n\n     \n         What does this do? \n         This creates a  features/  folder for your  Features (tests) , and a new  Context class . These will come in handy later! \n       To confirm that everything is set up correctly, run:\n     vendor/bin/behat -dl \n    If it worked, you will see a list of text that looks a little like the following (but much longer):\n     Given I am an anonymous user\nGiven I am not logged in\nGiven I am logged in as a user with the :role role(s)\nGiven I am logged in as :name", 
            "title": "Installation"
        }, 
        {
            "location": "/getting-started/installation/index.html#next-steps", 
            "text": "Now that you have WordHat set up, we recommend reading our  introduction to Behat  to help you learn the basics before you start writing tests for your site.      The WP-CLI executable  must  be named  wp  and be within your system s  $PATH .    Selenium is recommended for testing  websites that require Javascript . Behat requires the  Mink Selenium2 library , which we include in the installation instructions above.", 
            "title": "Next steps"
        }, 
        {
            "location": "/getting-started/behat-intro/index.html", 
            "text": "Behat\n\n\nBehat\n is a test framework for Behavior Driven Development (BDD) in \nPHP\n. \nBDD\n is a methodology for developing software through continuous example-based communication between developers and a business.\n\n\nThis communication happens in a form that both the business and developers can clearly understand: examples. The examples are structured around a \nContext, Event, Outcome\n pattern.\n\n\nContext, Event, Outcome\n\n\nIn Behat, tests are organised into Scenarios, and multiple Scenarios are grouped into Features. Feature files start with the story of the business feature being tested (one per file), followed by at least one Scenario.\n\n\nEach Scenario consists of a list of Steps, which must start with one of the following keywords: \nGiven\n, \nWhen\n, \nThen\n, \nBut\n, \nAnd\n.\n\n\nA Scenario always follows the same basic format:\n\n\nScenario:\n Some description of the scenario\n\n\n    Given \nsome context\n\n\n    \nWhen \nsome event\n\n\n    \nThen \noutcome\n\n\n\n\n\nEach part of the Scenario \n the context, the event, and the\noutcome \n can be extended by using the \nAnd\n or \nBut\n keywords:\n\n\nScenario:\n Some description of the scenario\n\n\n    Given \nsome context\n\n\n        \nAnd \nmore context\n\n\n    \nWhen \nsome event\n\n\n        \nAnd \nsecond event occurs\n\n\n    \nThen \noutcome\n\n\n        \nAnd \nanother outcome\n\n\n    \nBut \nanother outcome\n\n\n\n\n\n\n\nDid you know?\n\n\nThere is no difference between the \nThen\n, \nAnd\n, and \nBut\n keywords. Use each appropriately to write Scenarios that are natural and readable.\n\n\n\n\nFeatures\n\n\nImagine that we are building a new e-commerce website. One of the key features of any online shop is the ability to buy products, but before buying anything, customers need to be able to tell the shop which products they want to buy. We need a shopping basket.\n\n\nWith this, we can create our first user story:\n\n\nFeature:\n Shopping basket\n\n\n    In order to buy products\n\n\n    As a customer\n\n\n    I need to be able to put interesting products into a basket\n\n\n\n\n\nBefore we start development, we must have a real conversation with our business stakeholders; they might say that they want customers to not only see the combined price of the products in the basket, but also the price reflecting the tax and the delivery cost (which depends on the total price of the products):\n\n\nFeature:\n Shopping basket\n\n\n    In order to buy products\n\n\n    As a customer\n\n\n    I need to be able to put interesting products into a basket\n\n\n\n    Rules:\n\n\n    - Tax is 20%\n\n\n    - Delivery for basket under \u00a310 is \u00a33\n\n\n    - Delivery for basket over \u00a310 is \u00a32\n\n\n\n\n\n\n\nSummary\n\n\nFeatures are a simple description of a user story.\n\n\nThe format is always the same: the title of the feature, followed by three lines that describe the benefit, the role, and the feature itself. On subsequent lines, we can add any amount of additional description (such as the rules section, in this example).\n\n\n\n\nIn isolation, each rule by itself is understandable, but there is ambiguous complexity when we try to describe the feature in terms of \nrules\n. For example, what does it mean to add tax? What happens when we have two products, one of which is less than \u00a310, and another one that is more?\n\n\nTo resolve this, we must have another conversation with our business stakeholders. This will often take the form of actual examples of a customer adding products to the basket. After some back-and-forth, we agree upon a list of behaviour examples.\n\n\nIn \nBDD\n, these are called \nScenarios\n.\n\n\nScenarios\n\n\nAfter conversation with our business stakeholders, we came up with the following:\n\n\nFeature:\n Shopping basket\n\n\n    In order to buy products\n\n\n    As a customer\n\n\n    I need to be able to put interesting products into a basket\n\n\n\n    Rules:\n\n\n    - Tax is 20%\n\n\n    - Delivery for basket under \u00a310 is \u00a33\n\n\n    - Delivery for basket over \u00a310 is \u00a32\n\n\n\n    \nScenario:\n Buying a single product under \u00a310\n\n\n        Given \nthere is a \nself-sealing stem bolt\n, which costs \u00a3\n5\n\n\n        \nWhen \nI add the \nself-sealing stem bolt\n to the basket\n\n\n        \nThen \nI should have \n1\n product in the basket\n\n\n            \nAnd \nthe overall basket price should be \u00a3\n9\n\n\n\n    \nScenario:\n Buying a single product over \u00a310\n\n\n        Given \nthere is \nyamok sauce\n, which costs \u00a3\n15\n\n\n        \nWhen \nI add the \nyamok sauce\n to the basket\n\n\n        \nThen \nI should have \n1\n product in the basket\n\n\n            \nAnd \nthe overall basket price should be \u00a3\n20\n\n\n\n    \nScenario:\n Buying two products over \u00a310\n\n\n        Given \nthere is \nyamok sauce\n, which costs \u00a3\n10\n\n\n            \nAnd \nthere is a \nself-sealing stem bolt\n, which costs \u00a3\n5\n\n\n        \nWhen \nI add the \nyamok sauce\n to the basket\n\n\n            \nAnd \nI add the \nself-sealing stem bolt\n to the basket\n\n\n        \nThen \nI should have \n2\n products in the basket\n\n\n            \nAnd \nthe overall basket price should be \u00a3\n20\n\n\n\n\n\n\n\nDid you know?\n\n\nScenarios in Feature files should focus on the \nwhat\n, rather than the \nhow\n.\n\n\nEach Scenario should be concise and to the point, so that the reader can quickly grasp the intent of the test without having to read a lot of irrelevant steps.\n\n\n\n\nThe totality of the above represents our business\n shared understanding of our project, written in a structured format. It is based on the clear and constructive conversation we had together with our business stakeholders. This, in essence, is what \nBDD\n is.\n\n\nContexts\n\n\nBehat allows us to automate behaviour checks by comparing the prescribed behaviour against a system\ns actual behavior. Before Behat can do this, we need to teach it how to understand our structured language \n otherwise, how is it meant to understand what we mean by \nthen I should have 2 products in the basket\n?\n\n\nContexts are PHP objects that tell Behat how to test Features. Behat parses the \nPHPDoc annotation\n to map instructions in a Scenario, to methods within Context objects (known as a Step Definition).\n\n\n\n\nSummary\n\n\nFeature files describe how a system should behave, and Contexts explain how to test it.\n\n\n\n\nA Context always follows the same basic format:\n\n\n\n?php\n\n\nclass\n \nFeatureContext\n \nimplements\n \n\\Behat\\Behat\\Context\\Context\n\n\n{\n\n    \n/** @Given some context */\n\n    \npublic\n \nfunction\n \nprepareContext\n()\n\n    \n{\n\n        \n// Do something.\n\n    \n}\n\n\n    \n/** @When some event */\n\n    \npublic\n \nfunction\n \ndoSomeEvent\n()\n\n    \n{\n\n        \n// Do something.\n\n    \n}\n\n\n    \n/** @Then outcome */\n\n    \npublic\n \nfunction\n \ncheckOutcome\n()\n\n    \n{\n\n        \n// Do something.\n\n    \n}\n\n\n}\n\n\n\n\n\n\nThe \n@Given\n, \n@When\n, and \n@Then\n keywords allow Behat to match a Step to a method.\n\n\nIn the annotation, Behat can capture tokens (words starting with a colon, e.g.\n\n:arg1\n) and pass their value to the method as arguments. Behat also supports optionally matching part of an Step using brackets.\n\n\n\n\nDid you know?\n\n\nTo facilitate more complex matching requirements, Behat supports regular expressions.\n\n\n\n\nAn example of a Step Definition required for our e-commerce website is:\n\n\n\n?php\n\n\n/**\n\n\n * @Given there is a(n) :arg1, which costs \u00a3:arg2\n\n\n */\n\n\npublic\n \nfunction\n \nthereIsAWhichCosts\n(\n$arg1\n,\n \n$arg2\n)\n\n\n{\n\n    \n// Check $arg1 costs $arg2.\n\n    \n// Add $arg1 to shopping basket.\n\n    \n// If something goes wrong, throw an Exception.\n\n\n}\n\n\n\n\n\n\nThe PHPDoc annotation for this method tells Behat that the method should be executed whenever Behat sees a Step that looks like \n... there is a ..., which costs \u00a3...\n. This pattern will match any of the following Steps:\n\n\n\n\nGiven there is a \nself-sealing stem bolt\n, which costs \u00a35\n\n\nGiven there is a \nself-sealing stem bolt\n, which costs \u00a310\n\n\nGiven there is an 'automated assembler', which costs \u00a310\n\n\nGiven there is a bolt, which costs \u00a32\n\n\n\n\nNext steps\n\n\nThis guide has introduced the basics of Behat and \nBDD\n. To learn more, we recommend the following websites and presentations:\n\n\n\n\nJessica Mauerhan: \nBehat: Beyond the Basic\n.\n\n\nKnp University: \nBDD, Behat, Mink and other Wonderful Things\n.\n\n\nInviqa: \nThe beginner\ns guide to BDD\n.\n\n\nAndy Knight: \nThe Behavior-Driven Three Amigos\n.\n\n\n\n\nYou are now ready to begin working with WordHat, but we recommend reviewing our \nbest practices for configuring WordHat\n for your project.", 
            "title": "Intro to Behat"
        }, 
        {
            "location": "/getting-started/behat-intro/index.html#behat", 
            "text": "Behat  is a test framework for Behavior Driven Development (BDD) in  PHP .  BDD  is a methodology for developing software through continuous example-based communication between developers and a business.  This communication happens in a form that both the business and developers can clearly understand: examples. The examples are structured around a  Context, Event, Outcome  pattern.", 
            "title": "Behat"
        }, 
        {
            "location": "/getting-started/behat-intro/index.html#context-event-outcome", 
            "text": "In Behat, tests are organised into Scenarios, and multiple Scenarios are grouped into Features. Feature files start with the story of the business feature being tested (one per file), followed by at least one Scenario.  Each Scenario consists of a list of Steps, which must start with one of the following keywords:  Given ,  When ,  Then ,  But ,  And .  A Scenario always follows the same basic format:  Scenario:  Some description of the scenario      Given  some context       When  some event       Then  outcome   Each part of the Scenario   the context, the event, and the\noutcome   can be extended by using the  And  or  But  keywords:  Scenario:  Some description of the scenario      Given  some context           And  more context       When  some event           And  second event occurs       Then  outcome           And  another outcome       But  another outcome    Did you know?  There is no difference between the  Then ,  And , and  But  keywords. Use each appropriately to write Scenarios that are natural and readable.", 
            "title": "Context, Event, Outcome"
        }, 
        {
            "location": "/getting-started/behat-intro/index.html#features", 
            "text": "Imagine that we are building a new e-commerce website. One of the key features of any online shop is the ability to buy products, but before buying anything, customers need to be able to tell the shop which products they want to buy. We need a shopping basket.  With this, we can create our first user story:  Feature:  Shopping basket      In order to buy products      As a customer      I need to be able to put interesting products into a basket   Before we start development, we must have a real conversation with our business stakeholders; they might say that they want customers to not only see the combined price of the products in the basket, but also the price reflecting the tax and the delivery cost (which depends on the total price of the products):  Feature:  Shopping basket      In order to buy products      As a customer      I need to be able to put interesting products into a basket      Rules:      - Tax is 20%      - Delivery for basket under \u00a310 is \u00a33      - Delivery for basket over \u00a310 is \u00a32    Summary  Features are a simple description of a user story.  The format is always the same: the title of the feature, followed by three lines that describe the benefit, the role, and the feature itself. On subsequent lines, we can add any amount of additional description (such as the rules section, in this example).   In isolation, each rule by itself is understandable, but there is ambiguous complexity when we try to describe the feature in terms of  rules . For example, what does it mean to add tax? What happens when we have two products, one of which is less than \u00a310, and another one that is more?  To resolve this, we must have another conversation with our business stakeholders. This will often take the form of actual examples of a customer adding products to the basket. After some back-and-forth, we agree upon a list of behaviour examples.  In  BDD , these are called  Scenarios .", 
            "title": "Features"
        }, 
        {
            "location": "/getting-started/behat-intro/index.html#scenarios", 
            "text": "After conversation with our business stakeholders, we came up with the following:  Feature:  Shopping basket      In order to buy products      As a customer      I need to be able to put interesting products into a basket      Rules:      - Tax is 20%      - Delivery for basket under \u00a310 is \u00a33      - Delivery for basket over \u00a310 is \u00a32       Scenario:  Buying a single product under \u00a310          Given  there is a  self-sealing stem bolt , which costs \u00a3 5           When  I add the  self-sealing stem bolt  to the basket           Then  I should have  1  product in the basket               And  the overall basket price should be \u00a3 9       Scenario:  Buying a single product over \u00a310          Given  there is  yamok sauce , which costs \u00a3 15           When  I add the  yamok sauce  to the basket           Then  I should have  1  product in the basket               And  the overall basket price should be \u00a3 20       Scenario:  Buying two products over \u00a310          Given  there is  yamok sauce , which costs \u00a3 10               And  there is a  self-sealing stem bolt , which costs \u00a3 5           When  I add the  yamok sauce  to the basket               And  I add the  self-sealing stem bolt  to the basket           Then  I should have  2  products in the basket               And  the overall basket price should be \u00a3 20    Did you know?  Scenarios in Feature files should focus on the  what , rather than the  how .  Each Scenario should be concise and to the point, so that the reader can quickly grasp the intent of the test without having to read a lot of irrelevant steps.   The totality of the above represents our business  shared understanding of our project, written in a structured format. It is based on the clear and constructive conversation we had together with our business stakeholders. This, in essence, is what  BDD  is.", 
            "title": "Scenarios"
        }, 
        {
            "location": "/getting-started/behat-intro/index.html#contexts", 
            "text": "Behat allows us to automate behaviour checks by comparing the prescribed behaviour against a system s actual behavior. Before Behat can do this, we need to teach it how to understand our structured language   otherwise, how is it meant to understand what we mean by  then I should have 2 products in the basket ?  Contexts are PHP objects that tell Behat how to test Features. Behat parses the  PHPDoc annotation  to map instructions in a Scenario, to methods within Context objects (known as a Step Definition).   Summary  Feature files describe how a system should behave, and Contexts explain how to test it.   A Context always follows the same basic format:  ?php  class   FeatureContext   implements   \\Behat\\Behat\\Context\\Context  { \n     /** @Given some context */ \n     public   function   prepareContext () \n     { \n         // Do something. \n     } \n\n     /** @When some event */ \n     public   function   doSomeEvent () \n     { \n         // Do something. \n     } \n\n     /** @Then outcome */ \n     public   function   checkOutcome () \n     { \n         // Do something. \n     }  }    The  @Given ,  @When , and  @Then  keywords allow Behat to match a Step to a method.  In the annotation, Behat can capture tokens (words starting with a colon, e.g. :arg1 ) and pass their value to the method as arguments. Behat also supports optionally matching part of an Step using brackets.   Did you know?  To facilitate more complex matching requirements, Behat supports regular expressions.   An example of a Step Definition required for our e-commerce website is:  ?php  /**   * @Given there is a(n) :arg1, which costs \u00a3:arg2   */  public   function   thereIsAWhichCosts ( $arg1 ,   $arg2 )  { \n     // Check $arg1 costs $arg2. \n     // Add $arg1 to shopping basket. \n     // If something goes wrong, throw an Exception.  }    The PHPDoc annotation for this method tells Behat that the method should be executed whenever Behat sees a Step that looks like  ... there is a ..., which costs \u00a3... . This pattern will match any of the following Steps:   Given there is a  self-sealing stem bolt , which costs \u00a35  Given there is a  self-sealing stem bolt , which costs \u00a310  Given there is an 'automated assembler', which costs \u00a310  Given there is a bolt, which costs \u00a32", 
            "title": "Contexts"
        }, 
        {
            "location": "/getting-started/behat-intro/index.html#next-steps", 
            "text": "This guide has introduced the basics of Behat and  BDD . To learn more, we recommend the following websites and presentations:   Jessica Mauerhan:  Behat: Beyond the Basic .  Knp University:  BDD, Behat, Mink and other Wonderful Things .  Inviqa:  The beginner s guide to BDD .  Andy Knight:  The Behavior-Driven Three Amigos .   You are now ready to begin working with WordHat, but we recommend reviewing our  best practices for configuring WordHat  for your project.", 
            "title": "Next steps"
        }, 
        {
            "location": "/getting-started/wordhat-intro/index.html", 
            "text": "WordHat\n\n\nWhen you start a new project with Behat, perhaps the first things to think about \n after integrating \nBDD\n into your workflow \n will be getting browser automation working, and writing your first tests.\n\n\nOtherwise, if you are unsure how to proceed, first check the \nFAQ\n and the other recipe pages in the menu. These will be added to when we receive repeat questions. If you encounter a bug, have a suggestion, or would like to help the project grow, please get in contact via \nGithub\n or our \nSlack\n.\n\n\nBrowser automation\n\n\nOne of the fun things about using Behat is seeing it control your web browser and navigating your site. Behat relies on a library called \nMink\n to interface with your web browser. Mink has its own driver system, with \neach driver supporting a different combination of browser features\n.\n\n\nSome Mink drivers run headless web browsers (e.g. Goutte), and these tend to be the fastest, though notably, most do not support Javascript. WordHat\ns sample configuration file is configured to use \nSelenium\n, which supports a broad range of browser features for most use cases. Selenium is fiddly to set up, so we recommend using \nvvo/selenium-standalone\n.\n\n\nFor tests requiring Javascript interactions, mark the scenario or feature with the \n@javascript\n \ntag\n.\n\n\nYour first tests\n\n\nTo confirm your Behat set up is working, copy any one (or all!) of WordHat\ns own tests from \nvendor/paulgibbs/behat-wordpress-extension/features/*.feature\n into your project\ns \nfeatures/\n folder.\n\n\nRun Behat with \nvendor/bin/behat\n, and the tests you copied should pass if everything is working.", 
            "title": "WordHat"
        }, 
        {
            "location": "/getting-started/wordhat-intro/index.html#wordhat", 
            "text": "When you start a new project with Behat, perhaps the first things to think about   after integrating  BDD  into your workflow   will be getting browser automation working, and writing your first tests.  Otherwise, if you are unsure how to proceed, first check the  FAQ  and the other recipe pages in the menu. These will be added to when we receive repeat questions. If you encounter a bug, have a suggestion, or would like to help the project grow, please get in contact via  Github  or our  Slack .", 
            "title": "WordHat"
        }, 
        {
            "location": "/getting-started/wordhat-intro/index.html#browser-automation", 
            "text": "One of the fun things about using Behat is seeing it control your web browser and navigating your site. Behat relies on a library called  Mink  to interface with your web browser. Mink has its own driver system, with  each driver supporting a different combination of browser features .  Some Mink drivers run headless web browsers (e.g. Goutte), and these tend to be the fastest, though notably, most do not support Javascript. WordHat s sample configuration file is configured to use  Selenium , which supports a broad range of browser features for most use cases. Selenium is fiddly to set up, so we recommend using  vvo/selenium-standalone .  For tests requiring Javascript interactions, mark the scenario or feature with the  @javascript   tag .", 
            "title": "Browser automation"
        }, 
        {
            "location": "/getting-started/wordhat-intro/index.html#your-first-tests", 
            "text": "To confirm your Behat set up is working, copy any one (or all!) of WordHat s own tests from  vendor/paulgibbs/behat-wordpress-extension/features/*.feature  into your project s  features/  folder.  Run Behat with  vendor/bin/behat , and the tests you copied should pass if everything is working.", 
            "title": "Your first tests"
        }, 
        {
            "location": "/features/overview/index.html", 
            "text": "Overview\n\n\nWordHat provides WordPress-specific functionality for common testing scenarios that are specific to WordPress sites. We do this by providing a range of \nBehat contexts\n that provide useful step definitions.\n\n\nFor convenience, our \nbehat.yml.dist\n configuration template loads all of our contexts by default, though Behat does support \nmore complex configuration\n for advanced use cases.\n\n\nTo find out which step definitions are available for your tests, run \nvendor/bin/behat -dl\n in your terminal.\n\n\nDrivers\n\n\nThe \nGiven\n and \nWhen\n steps in a \nBehat Scenario\n configure a WordPress into a known state for reliable testing. WordHat abstracts this communication between WordPress and itself into a \ndrivers\n system. Two drivers are currently provided: WP-CLI (the default), and WP-PHP.\n\n\n\n\nDrivers\n\n\nWordHat only uses a driver to configure a WordPress into a known state.\n\n\nYour actual tests are run in a web browser, via \nMink\n.\n\n\n\n\nTo configure WordHat to use a specific driver, set \ndefault_driver\n in your \nbehat.yml\n.\n\n\nWP-CLI\n\n\nThe WP-CLI driver uses \nWP-CLI\n to connect to WordPress.\nThis is the default and recommended driver, and allows you to \nrun your tests and your WordPress site on different servers\n.\n\n\nWP-PHP\n\n\nThe WP-PHP driver loads WordPress by bootstrapping it directly. This approach was taken from WordPress\n \nPHPUnit integration test framework\n. You have to run your tests directly on your WordPress server.\n\n\nContexts\n\n\n\n\nUnder development\n\n\nStep definitions are not fully implemented \n yet. More are added with each release of WordHat.\n\n\n\n\nContent\n\n\nThe \nContentContext\n context provides a range of step definitions for managing post types, taxonomy terms, and comments.\n\n\nDebug\n\n\nThe \nDebugContext\n context provides step definitions to help debug Scenarios during development.\n\n\nSite\n\n\nThe \nSiteContext\n context provides step definitions for activating/deactivating plugins, switching themes, and clearing the object cache.\n\n\nTinyMCE\n\n\nThe \nEditPost\n context provides step definitions to manage editing and creating content within wp-admin.\n\n\nToolbar\n\n\nThe \nToolbarContext\n context provides step definitions to interact with the WordPress Toolbar.\n\n\nUser\n\n\nThe \nUserContext\n context provides a range of step definitions for managing users.\n\n\nWidget\n\n\nThe \nWidgetContext\n context provides step definitions to add/remove widgets from sidebars.\n\n\nwp-admin\n\n\nThe \nDashboard\n context provides a range of step definitions for generally interacting with, and navigating around, the WordPress administration screens (i.e. wp-admin).", 
            "title": "Overview"
        }, 
        {
            "location": "/features/overview/index.html#overview", 
            "text": "WordHat provides WordPress-specific functionality for common testing scenarios that are specific to WordPress sites. We do this by providing a range of  Behat contexts  that provide useful step definitions.  For convenience, our  behat.yml.dist  configuration template loads all of our contexts by default, though Behat does support  more complex configuration  for advanced use cases.  To find out which step definitions are available for your tests, run  vendor/bin/behat -dl  in your terminal.", 
            "title": "Overview"
        }, 
        {
            "location": "/features/overview/index.html#drivers", 
            "text": "The  Given  and  When  steps in a  Behat Scenario  configure a WordPress into a known state for reliable testing. WordHat abstracts this communication between WordPress and itself into a  drivers  system. Two drivers are currently provided: WP-CLI (the default), and WP-PHP.   Drivers  WordHat only uses a driver to configure a WordPress into a known state.  Your actual tests are run in a web browser, via  Mink .   To configure WordHat to use a specific driver, set  default_driver  in your  behat.yml .", 
            "title": "Drivers"
        }, 
        {
            "location": "/features/overview/index.html#wp-cli", 
            "text": "The WP-CLI driver uses  WP-CLI  to connect to WordPress.\nThis is the default and recommended driver, and allows you to  run your tests and your WordPress site on different servers .", 
            "title": "WP-CLI"
        }, 
        {
            "location": "/features/overview/index.html#wp-php", 
            "text": "The WP-PHP driver loads WordPress by bootstrapping it directly. This approach was taken from WordPress   PHPUnit integration test framework . You have to run your tests directly on your WordPress server.", 
            "title": "WP-PHP"
        }, 
        {
            "location": "/features/overview/index.html#contexts", 
            "text": "Under development  Step definitions are not fully implemented   yet. More are added with each release of WordHat.", 
            "title": "Contexts"
        }, 
        {
            "location": "/features/overview/index.html#content", 
            "text": "The  ContentContext  context provides a range of step definitions for managing post types, taxonomy terms, and comments.", 
            "title": "Content"
        }, 
        {
            "location": "/features/overview/index.html#debug", 
            "text": "The  DebugContext  context provides step definitions to help debug Scenarios during development.", 
            "title": "Debug"
        }, 
        {
            "location": "/features/overview/index.html#site", 
            "text": "The  SiteContext  context provides step definitions for activating/deactivating plugins, switching themes, and clearing the object cache.", 
            "title": "Site"
        }, 
        {
            "location": "/features/overview/index.html#tinymce", 
            "text": "The  EditPost  context provides step definitions to manage editing and creating content within wp-admin.", 
            "title": "TinyMCE"
        }, 
        {
            "location": "/features/overview/index.html#toolbar", 
            "text": "The  ToolbarContext  context provides step definitions to interact with the WordPress Toolbar.", 
            "title": "Toolbar"
        }, 
        {
            "location": "/features/overview/index.html#user", 
            "text": "The  UserContext  context provides a range of step definitions for managing users.", 
            "title": "User"
        }, 
        {
            "location": "/features/overview/index.html#widget", 
            "text": "The  WidgetContext  context provides step definitions to add/remove widgets from sidebars.", 
            "title": "Widget"
        }, 
        {
            "location": "/features/overview/index.html#wp-admin", 
            "text": "The  Dashboard  context provides a range of step definitions for generally interacting with, and navigating around, the WordPress administration screens (i.e. wp-admin).", 
            "title": "wp-admin"
        }, 
        {
            "location": "/configuration/settings/index.html", 
            "text": "Settings\n\n\nThis documentaton refers to settings provided by the WordHat extension.\n\n\nConsult the \nBehat website\n for an overview of general settings, or the \nMink website\n for settings relating to controlling a web browser.\n\n\nWordHat\n\n\nThese are the options provided by the WordHat extension:\n\n\nPaulGibbs\\WordpressBehatExtension\n:\n\n  \ndefault_driver\n:\n \nwpcli\n\n  \npath\n:\n \n~\n\n\n  \n# User settings.\n\n  \nusers\n:\n\n    \nadmin\n:\n\n      \nusername\n:\n \nadmin\n\n      \npassword\n:\n \nadmin\n\n    \neditor\n:\n\n      \nusername\n:\n \neditor\n\n      \npassword\n:\n \neditor\n\n    \nauthor\n:\n\n      \nusername\n:\n \nauthor\n\n      \npassword\n:\n \nauthor\n\n    \ncontributor\n:\n\n      \nusername\n:\n \ncontributor\n\n      \npassword\n:\n \ncontributor\n\n    \nsubscriber\n:\n\n      \nusername\n:\n \nsubscriber\n\n      \npassword\n:\n \nsubscriber\n\n\n  \n# WordPress settings.\n\n  \nsite_url\n:\n \n~\n\n  \npermalinks\n:\n\n    \nauthor_archive\n:\n \nauthor/%s/\n\n  \ndatabase\n:\n\n    \nrestore_after_test\n:\n \nfalse\n\n    \nbackup_path\n:\n \n~\n\n\n  \n# Driver settings.\n\n  \nwpcli\n:\n\n    \nalias\n:\n \ndev\n\n    \nbinary\n:\n \nwp\n\n\n\n\n\n\n\n\n\n\n\nOption\n\n\nDefault value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndefault_driver\n\n\nwpcli\n\n\nOptional\n.\nThe \nWordPress driver\n to use (\nwpcli\n, \nwpphp\n).\n\n\n\n\n\n\npath\n\n\nnull\n\n\nOptional\n.\nPath to WordPress files.\n\n\n\n\n\n\nusers.*\n\n\nsee example\n\n\nOptional\n.\nKeys must match names of WordPress roles.\n\n\n\n\n\n\nsite_url\n\n\nnull\n\n\nOptional\n.\nIf your WordPress is installed in a subdirectory, set this to the \nsite_url()\n value. Defaults to \nmink.base_url\n.\n\n\n\n\n\n\npermalinks.*\n\n\nsee example\n\n\nOptional\n.\nPermalink pattern for the specific kind of link.\n%s\n is replaced with an ID/object name, as appropriate.\n\n\n\n\n\n\ndatabase.restore_after_test\n\n\nfalse\n\n\nOptional\n.\nIf \ntrue\n, \nWordHat will restore your site\ns database to its initial state between feature tests\n.\n\n\n\n\n\n\ndatabase.backup_path\n\n\nsee example\n\n\nOptional\n.\nIf \nrestore_after_test\n is true, and the value is a file path, WordHat will use that as the back up to restore the database from.\nIf the path is a directory, then before any tests are run, WordHat will generate a database back up and store it here.\nIf the path has not been set, WordHat will choose its own temporary folder.\n\n\n\n\n\n\nwpcli.alias\n\n\nnull\n\n\nOptional\n.\nWP-CLI alias\n (preferred over \nwpcli.path\n).\n\n\n\n\n\n\nwpcli.binary\n\n\nwp\n\n\nOptional\n.\nPath and name of WP-CLI binary.\n\n\n\n\n\n\n\n\nPer-environment settings\n\n\nSome of the settings in \nbehat.yml\n are environment specific. For example, the \nbase_url\n may be \nhttp://test.example.dev\n on your local development environment, while on a test server it might be \nhttp://test.example.com\n.\n\n\nIf you intend to run your tests on different environments, these sorts of settings should not be added to your \nbehat.yml\n. Instead, they should be exported in an environment variable.\n\n\nBefore running tests, Behat will check the \nBEHAT_PARAMS\n environment variable and add these settings to the ones that are present in \nbehat.yml\n (settings from this file takes precedence). This variable should contain a JSON object with your settings.\n\n\nExample JSON object:\n\n\n{\n\n  \nextensions\n:\n \n{\n\n    \nBehat\\\\MinkExtension\n:\n \n{\n\n      \nbase_url\n:\n \nhttp://development.dev\n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\nTo export this to the \nBEHAT_PARAMS\n environment variable on a Linux or MacOS system, squash the JSON object into a single line and surround with single quotes:\n\n\nexport\n \nBEHAT_PARAMS\n=\n{\nextensions\n:{\nBehat\\\\MinkExtension\n:{\nbase_url\n:\nhttp://development.dev\n}}}", 
            "title": "Settings"
        }, 
        {
            "location": "/configuration/settings/index.html#settings", 
            "text": "This documentaton refers to settings provided by the WordHat extension.  Consult the  Behat website  for an overview of general settings, or the  Mink website  for settings relating to controlling a web browser.", 
            "title": "Settings"
        }, 
        {
            "location": "/configuration/settings/index.html#wordhat", 
            "text": "These are the options provided by the WordHat extension:  PaulGibbs\\WordpressBehatExtension : \n   default_driver :   wpcli \n   path :   ~ \n\n   # User settings. \n   users : \n     admin : \n       username :   admin \n       password :   admin \n     editor : \n       username :   editor \n       password :   editor \n     author : \n       username :   author \n       password :   author \n     contributor : \n       username :   contributor \n       password :   contributor \n     subscriber : \n       username :   subscriber \n       password :   subscriber \n\n   # WordPress settings. \n   site_url :   ~ \n   permalinks : \n     author_archive :   author/%s/ \n   database : \n     restore_after_test :   false \n     backup_path :   ~ \n\n   # Driver settings. \n   wpcli : \n     alias :   dev \n     binary :   wp      Option  Default value  Description      default_driver  wpcli  Optional . The  WordPress driver  to use ( wpcli ,  wpphp ).    path  null  Optional . Path to WordPress files.    users.*  see example  Optional . Keys must match names of WordPress roles.    site_url  null  Optional . If your WordPress is installed in a subdirectory, set this to the  site_url()  value. Defaults to  mink.base_url .    permalinks.*  see example  Optional . Permalink pattern for the specific kind of link. %s  is replaced with an ID/object name, as appropriate.    database.restore_after_test  false  Optional . If  true ,  WordHat will restore your site s database to its initial state between feature tests .    database.backup_path  see example  Optional . If  restore_after_test  is true, and the value is a file path, WordHat will use that as the back up to restore the database from. If the path is a directory, then before any tests are run, WordHat will generate a database back up and store it here. If the path has not been set, WordHat will choose its own temporary folder.    wpcli.alias  null  Optional . WP-CLI alias  (preferred over  wpcli.path ).    wpcli.binary  wp  Optional . Path and name of WP-CLI binary.", 
            "title": "WordHat"
        }, 
        {
            "location": "/configuration/settings/index.html#per-environment-settings", 
            "text": "Some of the settings in  behat.yml  are environment specific. For example, the  base_url  may be  http://test.example.dev  on your local development environment, while on a test server it might be  http://test.example.com .  If you intend to run your tests on different environments, these sorts of settings should not be added to your  behat.yml . Instead, they should be exported in an environment variable.  Before running tests, Behat will check the  BEHAT_PARAMS  environment variable and add these settings to the ones that are present in  behat.yml  (settings from this file takes precedence). This variable should contain a JSON object with your settings.  Example JSON object:  { \n   extensions :   { \n     Behat\\\\MinkExtension :   { \n       base_url :   http://development.dev \n     } \n   }  }   To export this to the  BEHAT_PARAMS  environment variable on a Linux or MacOS system, squash the JSON object into a single line and surround with single quotes:  export   BEHAT_PARAMS = { extensions :{ Behat\\\\MinkExtension :{ base_url : http://development.dev }}}", 
            "title": "Per-environment settings"
        }, 
        {
            "location": "/recipes/faq/index.html", 
            "text": "FAQs\n\n\nIf you are new to the project or Behat, we recommend that you first \nread through our documentation\n. For any questions, feedback, or to contribute, you can get in contact with us via Github or our \nSlack\n.\n\n\nBrowsers\n\n\n\n\nIf you are using \nSelenium\n to run Javascript tests, and you access your WordPress site over HTTPS, \nand\n it has a self-signed certificate, you will need to manually configure the web browser to accept that certificate.\n\n\n\n\nDrivers\n\n\n\n\nIf you are using the WP-CLI driver to \nconnect to a remote WordPress site over SSH\n, WordHat assumes the remote server is Linux-like, with a shell that provides \nGNU Coreutils\n.\n\n\nTo configure WordHat to use a specific driver, set \ndefault_driver\n in your \nbehat.yml\n.\n\n\nAs of v1.1.0, it is possible to use multiple drivers at the same time. This should be considered an experimental feature for advanced users only. To enable it, tag a scenario with the name of the driver to use (e.g. \n@wpcli\n or \n@wpphp\n).\n\n\n\n\nSelenium\n\n\n\n\nOn a Mac, Selenium is incompatible with the default Apple Java; error messages look like \nUnsupported major.minor version 52.0\n. To fix, install \nOracle Java Platform JDK\n.\n\n\nWith Selenium, some environments may require a \nwebdriver\n; error messages may refer to \nGeckoWebDriver\n or \nChromeWebDriver\n, etc. Good solutions include \nvvo/selenium-standalone\n or \njoomla-projects/selenium-server-standalone\n.\n\n\n\n\nSupported platforms\n\n\n\n\nWordHat supports MacOS, most flavours of Linux, and Windows. We use \nTravis-CI\n and \nAppveyor\n to test on Ubuntu and Windows, respectively, and require modern versions of PHP.\n\n\n\n\nVirtual machines (Vagrant)\n\n\n\n\nIf you are using a Vagrant-powered virtual machine to run Behat via the \nWP-CLI driver\n, you will need to \nvagrant ssh\n into the box once. This will set up password-less authentication; otherwise, WordHat will prompt you for the SSH password frequently.\n\n\n\n\nWordPress\n\n\n\n\nIf your WordPress is installed in a subdirectory, you need to set the \nsite_url\n option to the value of the \nWordPress address (URL)\n option (found in WordPress \n Settings \n General). For more information, \nconsult the WordHat documentation\n.", 
            "title": "FAQ"
        }, 
        {
            "location": "/recipes/faq/index.html#faqs", 
            "text": "If you are new to the project or Behat, we recommend that you first  read through our documentation . For any questions, feedback, or to contribute, you can get in contact with us via Github or our  Slack .", 
            "title": "FAQs"
        }, 
        {
            "location": "/recipes/faq/index.html#browsers", 
            "text": "If you are using  Selenium  to run Javascript tests, and you access your WordPress site over HTTPS,  and  it has a self-signed certificate, you will need to manually configure the web browser to accept that certificate.", 
            "title": "Browsers"
        }, 
        {
            "location": "/recipes/faq/index.html#drivers", 
            "text": "If you are using the WP-CLI driver to  connect to a remote WordPress site over SSH , WordHat assumes the remote server is Linux-like, with a shell that provides  GNU Coreutils .  To configure WordHat to use a specific driver, set  default_driver  in your  behat.yml .  As of v1.1.0, it is possible to use multiple drivers at the same time. This should be considered an experimental feature for advanced users only. To enable it, tag a scenario with the name of the driver to use (e.g.  @wpcli  or  @wpphp ).", 
            "title": "Drivers"
        }, 
        {
            "location": "/recipes/faq/index.html#selenium", 
            "text": "On a Mac, Selenium is incompatible with the default Apple Java; error messages look like  Unsupported major.minor version 52.0 . To fix, install  Oracle Java Platform JDK .  With Selenium, some environments may require a  webdriver ; error messages may refer to  GeckoWebDriver  or  ChromeWebDriver , etc. Good solutions include  vvo/selenium-standalone  or  joomla-projects/selenium-server-standalone .", 
            "title": "Selenium"
        }, 
        {
            "location": "/recipes/faq/index.html#supported-platforms", 
            "text": "WordHat supports MacOS, most flavours of Linux, and Windows. We use  Travis-CI  and  Appveyor  to test on Ubuntu and Windows, respectively, and require modern versions of PHP.", 
            "title": "Supported platforms"
        }, 
        {
            "location": "/recipes/faq/index.html#virtual-machines-vagrant", 
            "text": "If you are using a Vagrant-powered virtual machine to run Behat via the  WP-CLI driver , you will need to  vagrant ssh  into the box once. This will set up password-less authentication; otherwise, WordHat will prompt you for the SSH password frequently.", 
            "title": "Virtual machines (Vagrant)"
        }, 
        {
            "location": "/recipes/faq/index.html#wordpress", 
            "text": "If your WordPress is installed in a subdirectory, you need to set the  site_url  option to the value of the  WordPress address (URL)  option (found in WordPress   Settings   General). For more information,  consult the WordHat documentation .", 
            "title": "WordPress"
        }, 
        {
            "location": "/recipes/content/index.html", 
            "text": "Database content\n\n\nYour tests will probably create WordPress content during their execution, and you need to remove that content from the database after each test. It is important to distinguish between persistent and non-persistent database content:\n\n\n\n\nWhen Behat starts, that initial state of the database is persisted through all tests.\n\n\nDatabase modifications made during a test, on the other hand, are not persistent. This means that database operations performed from within a test, such as the creation of posts or users, \nshould\n be discarded after each test.\n\n\n\n\nWhen you write tests that create, update, or delete content in the database, mark the scenario or feature with the \n@db\n \ntag\n.\n\n\nNon-persistent content\n\n\nYou can either take care of removing non-persistent content yourself, perhaps by using a \nBehat hook\n in a custom context class, or by scripting it into a \nCI\n process, or by letting WordHat do this for you.\n\n\nSetting \ndatabase.restore_after_test\n in your \nbehat.yml\n to \ntrue\n will have WordHat back up the database when first invoked, and then restore the database from that back up after each scenario. We strongly recommend using the \nWP-CLI driver\n when this is enabled.\n\n\nPersistent content\n\n\nYou can optionally add \ndatabase.backup_path\n to your \nbehat.yml\n. If its value is a file path, WordHat will use it as the back up to restore the database from. You could use this to create a \nseed\n database, ensuring an identical environment each time, and facilitating convenient pre-configuration (i.e. active plugins, theme, site options, and so on).\n\n\nIf set with a directory path, when WordHat creates its back up of the database when first invoked, the back up will be stored in this location.\n\n\nIf the path is invalid or the option has not been explictly set, WordHat will choose its own temporary directory (e.g. \n/tmp/\n on a Linux or MacOS).", 
            "title": "Database Content"
        }, 
        {
            "location": "/recipes/content/index.html#database-content", 
            "text": "Your tests will probably create WordPress content during their execution, and you need to remove that content from the database after each test. It is important to distinguish between persistent and non-persistent database content:   When Behat starts, that initial state of the database is persisted through all tests.  Database modifications made during a test, on the other hand, are not persistent. This means that database operations performed from within a test, such as the creation of posts or users,  should  be discarded after each test.   When you write tests that create, update, or delete content in the database, mark the scenario or feature with the  @db   tag .", 
            "title": "Database content"
        }, 
        {
            "location": "/recipes/content/index.html#non-persistent-content", 
            "text": "You can either take care of removing non-persistent content yourself, perhaps by using a  Behat hook  in a custom context class, or by scripting it into a  CI  process, or by letting WordHat do this for you.  Setting  database.restore_after_test  in your  behat.yml  to  true  will have WordHat back up the database when first invoked, and then restore the database from that back up after each scenario. We strongly recommend using the  WP-CLI driver  when this is enabled.", 
            "title": "Non-persistent content"
        }, 
        {
            "location": "/recipes/content/index.html#persistent-content", 
            "text": "You can optionally add  database.backup_path  to your  behat.yml . If its value is a file path, WordHat will use it as the back up to restore the database from. You could use this to create a  seed  database, ensuring an identical environment each time, and facilitating convenient pre-configuration (i.e. active plugins, theme, site options, and so on).  If set with a directory path, when WordHat creates its back up of the database when first invoked, the back up will be stored in this location.  If the path is invalid or the option has not been explictly set, WordHat will choose its own temporary directory (e.g.  /tmp/  on a Linux or MacOS).", 
            "title": "Persistent content"
        }, 
        {
            "location": "/recipes/errors/overview/index.html", 
            "text": "Exception error codes\n\n\nWhen WordHat is forced to throw a user-facing PHP exception, an error code beginning with \nW\n will be included at the start of the message. This documentation is provided to help you better understand the error, and in some cases, provide extra information to help you resolve the problem.\n\n\nThe range of valid error codes is \nW000\n to \nW999\n:\n\n\n\n\nW000-099\n represent miscellanous internal errors.\n\n\nW100-199\n represent internal errors related to the WP-CLI driver.\n\n\nW200-299\n represent internal errors related to the WP-PHP driver.\n\n\nW300-399\n are reserved for future use.\n\n\nW400-499\n represent errors related to \nPageObjects\n used by the drivers.\n\n\nW500-599\n represent errors from the WP-CLI driver.\n\n\nW600-699\n represent errors from the WP-PHP driver.\n\n\nW700-799\n are reserved for future use.\n\n\nW800-999\n are reserved for future use.", 
            "title": "Overview"
        }, 
        {
            "location": "/recipes/errors/overview/index.html#exception-error-codes", 
            "text": "When WordHat is forced to throw a user-facing PHP exception, an error code beginning with  W  will be included at the start of the message. This documentation is provided to help you better understand the error, and in some cases, provide extra information to help you resolve the problem.  The range of valid error codes is  W000  to  W999 :   W000-099  represent miscellanous internal errors.  W100-199  represent internal errors related to the WP-CLI driver.  W200-299  represent internal errors related to the WP-PHP driver.  W300-399  are reserved for future use.  W400-499  represent errors related to  PageObjects  used by the drivers.  W500-599  represent errors from the WP-CLI driver.  W600-699  represent errors from the WP-PHP driver.  W700-799  are reserved for future use.  W800-999  are reserved for future use.", 
            "title": "Exception error codes"
        }, 
        {
            "location": "/recipes/errors/w000-099/index.html", 
            "text": "Error codes W000-099\n\n\nThese errors should only appear if you have added a custom driver to WordHat, somehow adjusted the bundled drivers\n initialisation or bootstrapping processes, or asked a driver to do something it does not support.\n\n\nW001\n\n\n\n\nNo ability to (\n). Maybe use another driver?\n\n\n\n\nThe current driver does not support the requested action. A fix is to use another driver.\n\n\nW002\n\n\n\n\n[W002] Driver \n(\n)\n is not registered.\n\n\n\n\nWordHat could not find the requested driver. Check your \nbehat.yml\n for typos.", 
            "title": "Errors W000-099"
        }, 
        {
            "location": "/recipes/errors/w000-099/index.html#error-codes-w000-099", 
            "text": "These errors should only appear if you have added a custom driver to WordHat, somehow adjusted the bundled drivers  initialisation or bootstrapping processes, or asked a driver to do something it does not support.", 
            "title": "Error codes W000-099"
        }, 
        {
            "location": "/recipes/errors/w000-099/index.html#w001", 
            "text": "No ability to ( ). Maybe use another driver?   The current driver does not support the requested action. A fix is to use another driver.", 
            "title": "W001"
        }, 
        {
            "location": "/recipes/errors/w000-099/index.html#w002", 
            "text": "[W002] Driver  ( )  is not registered.   WordHat could not find the requested driver. Check your  behat.yml  for typos.", 
            "title": "W002"
        }, 
        {
            "location": "/recipes/errors/w100-199/index.html", 
            "text": "Error codes W100-199\n\n\nThese errors should only appear if something internal to the WP-CLI driver has gone wrong.\n\n\nW100\n\n\n\n\nYour WP-CLI is too old; version 1.5.0 or newer is required.\n\n\n\n\nCheck WordHat\ns \nsystem requirements\n.\n\n\nW101\n\n\n\n\nWordPress does not seem to be installed. Check \npath\n and/or \nalias\n settings in behat.yml\n\n\n\n\nWP-CLI\n cannot find WordPress. Check WordHat\ns \nconfiguration settings\n.\n\n\nW102\n\n\n\n\nWP-CLI driver failure in method (\n):\n(\n).\n\n\nTried to run: (\n)\n\n\n\n\nWP-CLI could not execute the requested command. Read the output for further information, and check WordHat\ns \nconfiguration settings\n.", 
            "title": "Errors W100-199"
        }, 
        {
            "location": "/recipes/errors/w100-199/index.html#error-codes-w100-199", 
            "text": "These errors should only appear if something internal to the WP-CLI driver has gone wrong.", 
            "title": "Error codes W100-199"
        }, 
        {
            "location": "/recipes/errors/w100-199/index.html#w100", 
            "text": "Your WP-CLI is too old; version 1.5.0 or newer is required.   Check WordHat s  system requirements .", 
            "title": "W100"
        }, 
        {
            "location": "/recipes/errors/w100-199/index.html#w101", 
            "text": "WordPress does not seem to be installed. Check  path  and/or  alias  settings in behat.yml   WP-CLI  cannot find WordPress. Check WordHat s  configuration settings .", 
            "title": "W101"
        }, 
        {
            "location": "/recipes/errors/w100-199/index.html#w102", 
            "text": "WP-CLI driver failure in method ( ):\n( ).  Tried to run: ( )   WP-CLI could not execute the requested command. Read the output for further information, and check WordHat s  configuration settings .", 
            "title": "W102"
        }, 
        {
            "location": "/recipes/errors/w200-299/index.html", 
            "text": "Error codes W200-299\n\n\nThese errors should only appear if something internal to the WP-PHP driver has gone wrong.\n\n\nW200\n\n\n\n\nWordPress PHP driver cannot find WordPress at (\n).\n\n\n\n\nWordHat cannot find WordPress. Check WordHat\ns \n$path configuration setting\n.", 
            "title": "Errors W200-299"
        }, 
        {
            "location": "/recipes/errors/w200-299/index.html#error-codes-w200-299", 
            "text": "These errors should only appear if something internal to the WP-PHP driver has gone wrong.", 
            "title": "Error codes W200-299"
        }, 
        {
            "location": "/recipes/errors/w200-299/index.html#w200", 
            "text": "WordPress PHP driver cannot find WordPress at ( ).   WordHat cannot find WordPress. Check WordHat s  $path configuration setting .", 
            "title": "W200"
        }, 
        {
            "location": "/recipes/errors/w400-499/index.html", 
            "text": "Error codes W400-499\n\n\nThese errors originate from \nPageObjects\n, which are used by the drivers to interact with WordPress in a way that prevents code duplication and promotes re-use.\n\n\nW400\n\n\n\n\nMetabox \n(\n)\n not found on the screen.\n\n\n\n\nThe browser cannot find the specified metabox on a content\ns new/edit screens.\nDoes the user\ns role give visibility of the metabox? Is the metabox registered for the content type?\n\n\nW401\n\n\n\n\nExpected screen is the wp-admin dashboard, instead on \n(\n)\n.\n\n\n\n\nThe browser is on an unexpected screen.\nDid something cause a redirect to another screen? Has the user authenticated?\n\n\nW402\n\n\n\n\nExpected screen header \n(\n)\n, found \n(\n)\n.\nHeader could not be found\n\n\n\n\nThe browser is on an unexpected screen, or the screen has unexpectedly changed.\nDid something cause a redirect to another screen? Has the user authenticated?\n\n\nW403\n\n\n\n\nToolbar link \n(\n)\n could not be found\n\n\n\n\nThe specified item could not be found in the WordPress Toolbar.\nHas the user authenticated? Does the user\ns role give visibility of the toolbar item?\n\n\nW404\n\n\n\n\nSearch field in the toolbar could not be found\n\n\n\n\nThe search field in the WordPress Toolbar could not be found.\nHas the user authenticated?\n\n\nW405\n\n\n\n\nMenu item could not be found\n\n\n\n\nThe specified item could not be found in the WordPress Admin Menu.\nHas the user authenticated? Does the user\ns role give visibility of the toolbar item?", 
            "title": "Errors W400-499"
        }, 
        {
            "location": "/recipes/errors/w400-499/index.html#error-codes-w400-499", 
            "text": "These errors originate from  PageObjects , which are used by the drivers to interact with WordPress in a way that prevents code duplication and promotes re-use.", 
            "title": "Error codes W400-499"
        }, 
        {
            "location": "/recipes/errors/w400-499/index.html#w400", 
            "text": "Metabox  ( )  not found on the screen.   The browser cannot find the specified metabox on a content s new/edit screens.\nDoes the user s role give visibility of the metabox? Is the metabox registered for the content type?", 
            "title": "W400"
        }, 
        {
            "location": "/recipes/errors/w400-499/index.html#w401", 
            "text": "Expected screen is the wp-admin dashboard, instead on  ( ) .   The browser is on an unexpected screen.\nDid something cause a redirect to another screen? Has the user authenticated?", 
            "title": "W401"
        }, 
        {
            "location": "/recipes/errors/w400-499/index.html#w402", 
            "text": "Expected screen header  ( ) , found  ( ) .\nHeader could not be found   The browser is on an unexpected screen, or the screen has unexpectedly changed.\nDid something cause a redirect to another screen? Has the user authenticated?", 
            "title": "W402"
        }, 
        {
            "location": "/recipes/errors/w400-499/index.html#w403", 
            "text": "Toolbar link  ( )  could not be found   The specified item could not be found in the WordPress Toolbar.\nHas the user authenticated? Does the user s role give visibility of the toolbar item?", 
            "title": "W403"
        }, 
        {
            "location": "/recipes/errors/w400-499/index.html#w404", 
            "text": "Search field in the toolbar could not be found   The search field in the WordPress Toolbar could not be found.\nHas the user authenticated?", 
            "title": "W404"
        }, 
        {
            "location": "/recipes/errors/w400-499/index.html#w405", 
            "text": "Menu item could not be found   The specified item could not be found in the WordPress Admin Menu.\nHas the user authenticated? Does the user s role give visibility of the toolbar item?", 
            "title": "W405"
        }, 
        {
            "location": "/recipes/errors/w500-599/index.html", 
            "text": "Error codes W500-599\n\n\nThese errors should only appear if you are using the WP-CLI driver, and something unexpected happens.\n\n\nW500\n\n\n\n\nCould not find comment with ID (\n)\n\n\n\n\nWP-CLI could not find the specified comment.\nCheck your \n*.feature\n files for typos.\n\n\nW501\n\n\n\n\nCould not find post with ID (\n)\n\n\n\n\nWP-CLI could not find the specified content.\nCheck your \n*.feature\n files for typos.\n\n\nW502\n\n\n\n\nCould not export database\n\n\n\n\nWP-CLI could not export the database.\nRead the output for further information.\n\n\nW503\n\n\n\n\nCould not find term with ID (\n)\n\n\n\n\nWP-CLI could not find the specified taxonomy term.\nCheck your \n*.feature\n files for typos.\n\n\nW504\n\n\n\n\nCould not find user with ID (\n)\n\n\n\n\nWP-CLI could not find the specified user account.\nCheck your \n*.feature\n files for typos.\n\n\nW505\n\n\n\n\nNo known way to check (\n) has password (\n)\n\n\n\n\nThe WP-CLI driver does not support \nDriver\\Element\\Wpcli\\validateCredentials()\n by design.\nUse another driver if this is required.\n\n\nW506\n\n\n\n\nSidebar \n(\n)\n does not exist\n\n\n\n\nWP-CLI could not find a sidebar registered with this name.\nCheck your \n*.feature\n files for typos.", 
            "title": "Errors W500-599"
        }, 
        {
            "location": "/recipes/errors/w500-599/index.html#error-codes-w500-599", 
            "text": "These errors should only appear if you are using the WP-CLI driver, and something unexpected happens.", 
            "title": "Error codes W500-599"
        }, 
        {
            "location": "/recipes/errors/w500-599/index.html#w500", 
            "text": "Could not find comment with ID ( )   WP-CLI could not find the specified comment.\nCheck your  *.feature  files for typos.", 
            "title": "W500"
        }, 
        {
            "location": "/recipes/errors/w500-599/index.html#w501", 
            "text": "Could not find post with ID ( )   WP-CLI could not find the specified content.\nCheck your  *.feature  files for typos.", 
            "title": "W501"
        }, 
        {
            "location": "/recipes/errors/w500-599/index.html#w502", 
            "text": "Could not export database   WP-CLI could not export the database.\nRead the output for further information.", 
            "title": "W502"
        }, 
        {
            "location": "/recipes/errors/w500-599/index.html#w503", 
            "text": "Could not find term with ID ( )   WP-CLI could not find the specified taxonomy term.\nCheck your  *.feature  files for typos.", 
            "title": "W503"
        }, 
        {
            "location": "/recipes/errors/w500-599/index.html#w504", 
            "text": "Could not find user with ID ( )   WP-CLI could not find the specified user account.\nCheck your  *.feature  files for typos.", 
            "title": "W504"
        }, 
        {
            "location": "/recipes/errors/w500-599/index.html#w505", 
            "text": "No known way to check ( ) has password ( )   The WP-CLI driver does not support  Driver\\Element\\Wpcli\\validateCredentials()  by design.\nUse another driver if this is required.", 
            "title": "W505"
        }, 
        {
            "location": "/recipes/errors/w500-599/index.html#w506", 
            "text": "Sidebar  ( )  does not exist   WP-CLI could not find a sidebar registered with this name.\nCheck your  *.feature  files for typos.", 
            "title": "W506"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html", 
            "text": "Error codes W600-699\n\n\nThese errors should only appear if you are using the WP-PHP driver, and something unexpected happens.\n\n\nW600\n\n\n\n\nFailed creating a new comment: (\n)\n\n\n\n\nWordPress could not add the comment.\nRead the output for futher information.\n\n\nW601\n\n\n\n\nCould not find comment with ID (\n)\n\n\n\n\nWordPress could not find the specified comment.\nCheck your \n*.feature\n files for typos.\n\n\nW602\n\n\n\n\nFailed deleting a comment\n\n\n\n\nWordPress could not delete the specified comment.\nDoes it exist?\n\n\nW603\n\n\n\n\nFailed creating new content: (\n)\n\n\n\n\nWordPress could not create the new content.\nRead the output for futher information.\n\n\nW604\n\n\n\n\nCould not find content with ID (\n)\n\n\n\n\nWordPress could not find the specific content.\nCheck your \n*.feature\n files for typos.\n\n\nW605\n\n\n\n\nFailed deleting content\n\n\n\n\nWordPress could not delete the specified content.\nDoes it exist?\n\n\nW606\n\n\n\n\nCould not export database in method (\n):\n\n\n(\n)\n\n\n(\n)\n\n\n\n\nWordPress could not export the database.\nRead the output for further information.\n\n\nW607\n\n\n\n\nCould not import database in method (\n):\n\n\n(\n)\n\n\n(\n)\n\n\n\n\nWordPress could not import a SQL file into the database.\nRead the output for further information.\n\n\nW608\n\n\n\n\nCannot find the plugin: (\n)\n\n\n\n\nWordPress could not find the specified plugin.\nCheck your \n*.feature\n files for typos.\n\n\nW609\n\n\n\n\nFailed creating a new term: (\n)\n\n\n\n\nWordPress could not create the specified taxonomy term.\nRead the output for further information.\n\n\nW610\n\n\n\n\nCould not find term with ID (\n)\n\n\nCould not find term with ID (\n): (\n)\n\n\n\n\nWordPress could not find the specified taxonomy term by name or by ID.\nCheck your \n*.feature\n files for typos.\n\n\nW611\n\n\n\n\nFailed deleting a term: (\n)\n\n\n\n\nWordPress could not delete the specified taxonomy term.\nRead the output for further information.\n\n\nW612\n\n\n\n\nCould not find theme (\n)\n\n\n\n\nWordPress could not find the specified theme.\nCheck your \n*.feature\n files for typos.\n\n\nW613\n\n\n\n\nWidget (\n) does not exist\n\n\n\n\nWordPress could not find the specified widget.\nCheck your \n*.feature\n files for typos.\n\n\nW614\n\n\n\n\nSidebar \n(\n)\n does not exist\n\n\n\n\nWordPress could not find a sidebar registered with this name.\nCheck your \n*.feature\n files for typos.\n\n\nW615\n\n\n\n\nFailed creating new user: (..)\n\n\n\n\nWordPress could not create the specified user account.\nRead the output for further information.\n\n\nW616\n\n\n\n\nCould not find user with ID (\n)\n\n\n\n\nWordPress could not find the specified user account.\nCheck your \n*.feature\n files for typos.\n\n\nW617\n\n\n\n\nFailed deleting user\n\n\n\n\nWordPress could not delete the specified user account.\nDoes it exist?", 
            "title": "Errors W600-699"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#error-codes-w600-699", 
            "text": "These errors should only appear if you are using the WP-PHP driver, and something unexpected happens.", 
            "title": "Error codes W600-699"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w600", 
            "text": "Failed creating a new comment: ( )   WordPress could not add the comment.\nRead the output for futher information.", 
            "title": "W600"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w601", 
            "text": "Could not find comment with ID ( )   WordPress could not find the specified comment.\nCheck your  *.feature  files for typos.", 
            "title": "W601"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w602", 
            "text": "Failed deleting a comment   WordPress could not delete the specified comment.\nDoes it exist?", 
            "title": "W602"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w603", 
            "text": "Failed creating new content: ( )   WordPress could not create the new content.\nRead the output for futher information.", 
            "title": "W603"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w604", 
            "text": "Could not find content with ID ( )   WordPress could not find the specific content.\nCheck your  *.feature  files for typos.", 
            "title": "W604"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w605", 
            "text": "Failed deleting content   WordPress could not delete the specified content.\nDoes it exist?", 
            "title": "W605"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w606", 
            "text": "Could not export database in method ( ):  ( )  ( )   WordPress could not export the database.\nRead the output for further information.", 
            "title": "W606"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w607", 
            "text": "Could not import database in method ( ):  ( )  ( )   WordPress could not import a SQL file into the database.\nRead the output for further information.", 
            "title": "W607"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w608", 
            "text": "Cannot find the plugin: ( )   WordPress could not find the specified plugin.\nCheck your  *.feature  files for typos.", 
            "title": "W608"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w609", 
            "text": "Failed creating a new term: ( )   WordPress could not create the specified taxonomy term.\nRead the output for further information.", 
            "title": "W609"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w610", 
            "text": "Could not find term with ID ( )  Could not find term with ID ( ): ( )   WordPress could not find the specified taxonomy term by name or by ID.\nCheck your  *.feature  files for typos.", 
            "title": "W610"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w611", 
            "text": "Failed deleting a term: ( )   WordPress could not delete the specified taxonomy term.\nRead the output for further information.", 
            "title": "W611"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w612", 
            "text": "Could not find theme ( )   WordPress could not find the specified theme.\nCheck your  *.feature  files for typos.", 
            "title": "W612"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w613", 
            "text": "Widget ( ) does not exist   WordPress could not find the specified widget.\nCheck your  *.feature  files for typos.", 
            "title": "W613"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w614", 
            "text": "Sidebar  ( )  does not exist   WordPress could not find a sidebar registered with this name.\nCheck your  *.feature  files for typos.", 
            "title": "W614"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w615", 
            "text": "Failed creating new user: (..)   WordPress could not create the specified user account.\nRead the output for further information.", 
            "title": "W615"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w616", 
            "text": "Could not find user with ID ( )   WordPress could not find the specified user account.\nCheck your  *.feature  files for typos.", 
            "title": "W616"
        }, 
        {
            "location": "/recipes/errors/w600-699/index.html#w617", 
            "text": "Failed deleting user   WordPress could not delete the specified user account.\nDoes it exist?", 
            "title": "W617"
        }, 
        {
            "location": "/contributing/open-source/index.html", 
            "text": "Contributing to WordHat\n\n\nCommunication standards\n\n\nCommunication is oxygen\n. Talk with us on \nGithub\n, or on our \nSlack\n chat room.\n\n\nAsk, don\nt assume\n. This project only accepts pull requests related to open issues. If you are proposing a new feature or change, please discuss it in an issue first.\n\n\nTechnicial standards\n\n\n\n\nPSR-1: Basic Coding Standard\n.\n\n\nPSR-2: Coding Style Guide\n.\n\n\nPSR-4: Autoloading Standard\n.\n\n\nDelimit variable and property names by underscore.\n\n\nOnly typehint callable, classes, and objects.\n\n\nPrefer short syntax \n[ ]\n for single-line arrays, and the traditional syntax for multi-line arrays.\n\n\nFor code files, keep maximumum line lengths to around ~120 characters.\n\n\nThe website documentation is to be written in British English (en-GB).\n\n\n\n\nYou can do some things to increase the chance that a change request or pull request is accepted the first time:\n\n\n\n\nRun \ncomposer commit\n to fix code standard errors.\n\n\nSubmit one pull request per fix or feature.\n\n\nIf your changes are not up to date \n rebase your branch on the parent branch.\n\n\nFollow the conventions used in the project.\n\n\nRemember about documentation.\n\n\nDo not bump the version number.", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/open-source/index.html#contributing-to-wordhat", 
            "text": "", 
            "title": "Contributing to WordHat"
        }, 
        {
            "location": "/contributing/open-source/index.html#communication-standards", 
            "text": "Communication is oxygen . Talk with us on  Github , or on our  Slack  chat room.  Ask, don t assume . This project only accepts pull requests related to open issues. If you are proposing a new feature or change, please discuss it in an issue first.", 
            "title": "Communication standards"
        }, 
        {
            "location": "/contributing/open-source/index.html#technicial-standards", 
            "text": "PSR-1: Basic Coding Standard .  PSR-2: Coding Style Guide .  PSR-4: Autoloading Standard .  Delimit variable and property names by underscore.  Only typehint callable, classes, and objects.  Prefer short syntax  [ ]  for single-line arrays, and the traditional syntax for multi-line arrays.  For code files, keep maximumum line lengths to around ~120 characters.  The website documentation is to be written in British English (en-GB).   You can do some things to increase the chance that a change request or pull request is accepted the first time:   Run  composer commit  to fix code standard errors.  Submit one pull request per fix or feature.  If your changes are not up to date   rebase your branch on the parent branch.  Follow the conventions used in the project.  Remember about documentation.  Do not bump the version number.", 
            "title": "Technicial standards"
        }, 
        {
            "location": "/contributing/build/index.html", 
            "text": "The build process and continuous integration\n\n\nThere are two styles of build which WordHat uses. One is a native build where WordHat, Wordpress, Selenium and other tools are run directly on the native platform. The other is a docker build where docker containers are used to host Wordhat, Wordpress, Selenium and Mysql.\n\n\nMaking it work locally.\n\n\nThe first thing you need to do is to \ninstall\n Docker. It is highly recommended that if you\nre on windows, you use \nDocker Toolbox\n as its support for linux containers is significantly better than the Windows native docker. We\nll keep trying it, and if that changes we\nll update this page.\n\n\nOnce you have docker installed, (and if you\nre running docker toolbox you\nve spun up a Docker terminal); simply clone the wordhat source, run \ncomposer install\n and then \nvendor/bin/phing\n and you\nll be laughing.\n\n\nMaking it work natively locally\n\n\nSo maybe you\nve already got a wordpress installation locally that you\nd like to use, and its running in a local webserver. That\ns cool - this is how to do it. You\nll also need to set up your own Selenium server if you want to run the javascript tests. Firstly you\nll need to create a file called \nbuild/properties/local.yml\n. Give it contents which are similar to the below, only with the values tweaked to suit your environemnt.\n\n\nwordhat\n:\n\n  \nbase-url\n:\n \nhttp://localhost:8080\n\n  \nwd-host\n:\n \nlocalhost:4444/wd/hub\n\n  \nwp-cli-binary\n:\n \nc:\\projects\\wordhat\\vendor\\bin\\wp\n\n  \nwp-path\n:\n \nc:\\inetpub\\wwwroot\n\n  \ndb-restore\n:\n \ntrue\n\n  \ndriver\n:\n \nwpcli\n\n\n\n\n\nOnce you\nve done that, do a \ncomposer install\n followed by \nvendor/bin/phing -Dwordhat.runstyle=native -Dwordhat.ci-engine=local\n and you should be laughing.\n\n\nHelpful Phings\n\n\nWe use phing to glue together all the tools we use to develop WordHat. We\nve only just got it set up, so if you find issues please do let us know either by raising an issue on GitHub or by jumping on our slack channel. Even though its early days, we\nve got some cool stuff setup to help you debug your WordHat contributions.\n\n\nDocker tricks\n\n\nFirstly if your Docker run fails, we don\nt automatically clear up. This means the containers are all still there for you to inspect. If you\nd like to get to a shell on the WordHat (which is also the WordPress) container, then simply run this command:\n\n\ndocker exec -it docker_wordpress_1 \n/bin/bash\n\n\n\n\n\nIf you need a root shell, then this command will do it:\n\n\ndocker exec -u root -it docker_wordpress_1 \n/bin/bash\n\n\n\n\n\nIf you\nd like to set off another test run then:\n\n\ndocker exec -it docker_wordpress_1 \nvendor/bin/phing behat:exec-tests\n\n\n\n\n\nAnd finally, when you\nve finished diagnosing, run:\n\n\nvendor/bin/phing docker:stop docker:cleanup\n\n\n\n\nand all the containers will be tidied away and their persistent storage deleted.", 
            "title": "Build Process"
        }, 
        {
            "location": "/contributing/build/index.html#the-build-process-and-continuous-integration", 
            "text": "There are two styles of build which WordHat uses. One is a native build where WordHat, Wordpress, Selenium and other tools are run directly on the native platform. The other is a docker build where docker containers are used to host Wordhat, Wordpress, Selenium and Mysql.", 
            "title": "The build process and continuous integration"
        }, 
        {
            "location": "/contributing/build/index.html#making-it-work-locally", 
            "text": "The first thing you need to do is to  install  Docker. It is highly recommended that if you re on windows, you use  Docker Toolbox  as its support for linux containers is significantly better than the Windows native docker. We ll keep trying it, and if that changes we ll update this page.  Once you have docker installed, (and if you re running docker toolbox you ve spun up a Docker terminal); simply clone the wordhat source, run  composer install  and then  vendor/bin/phing  and you ll be laughing.", 
            "title": "Making it work locally."
        }, 
        {
            "location": "/contributing/build/index.html#making-it-work-natively-locally", 
            "text": "So maybe you ve already got a wordpress installation locally that you d like to use, and its running in a local webserver. That s cool - this is how to do it. You ll also need to set up your own Selenium server if you want to run the javascript tests. Firstly you ll need to create a file called  build/properties/local.yml . Give it contents which are similar to the below, only with the values tweaked to suit your environemnt.  wordhat : \n   base-url :   http://localhost:8080 \n   wd-host :   localhost:4444/wd/hub \n   wp-cli-binary :   c:\\projects\\wordhat\\vendor\\bin\\wp \n   wp-path :   c:\\inetpub\\wwwroot \n   db-restore :   true \n   driver :   wpcli   Once you ve done that, do a  composer install  followed by  vendor/bin/phing -Dwordhat.runstyle=native -Dwordhat.ci-engine=local  and you should be laughing.", 
            "title": "Making it work natively locally"
        }, 
        {
            "location": "/contributing/build/index.html#helpful-phings", 
            "text": "We use phing to glue together all the tools we use to develop WordHat. We ve only just got it set up, so if you find issues please do let us know either by raising an issue on GitHub or by jumping on our slack channel. Even though its early days, we ve got some cool stuff setup to help you debug your WordHat contributions.", 
            "title": "Helpful Phings"
        }, 
        {
            "location": "/contributing/build/index.html#docker-tricks", 
            "text": "Firstly if your Docker run fails, we don t automatically clear up. This means the containers are all still there for you to inspect. If you d like to get to a shell on the WordHat (which is also the WordPress) container, then simply run this command:  docker exec -it docker_wordpress_1  /bin/bash   If you need a root shell, then this command will do it:  docker exec -u root -it docker_wordpress_1  /bin/bash   If you d like to set off another test run then:  docker exec -it docker_wordpress_1  vendor/bin/phing behat:exec-tests   And finally, when you ve finished diagnosing, run:  vendor/bin/phing docker:stop docker:cleanup  and all the containers will be tidied away and their persistent storage deleted.", 
            "title": "Docker tricks"
        }, 
        {
            "location": "/credits/index.html", 
            "text": "Team\n\n\n\n\nPaul Gibbs\n: Project Lead\n\n\nStephen Harris\n: Project Lead\n\n\nRichard Vodden\n\n\n\n\nAcknowledgements\n\n\nThe team wish to thank the following projects and their contributors, who provide inspiration and were fantasically useful learning resources:\n\n\n\n\nStephen Harris\n: \nstephenharris/WordPressBehatExtension\n\n\nJohn Blackbourn\n: \njohnbillion/WordPressBehatExtension\n\n\nTom Forrer\n: \ntmf/WordPressExtension\n\n\nWalter Dal Mut\n: \nwdalmut/WordPressExtension\n\n\nLaracasts\n: \nlaracasts/Behat-Laravel-Extension\n\n\nAriel Gold\n: \nari-gold/WordPress-Behat-Quickstart\n\n\n\n\nExtra special thanks is extended to \nJonathan Hedstrom\n and his \nBehat Drupal Extension\n project. Much of the structure of this project is based on Jonathan\ns work, and this project is forever in its debt, having taken direct inspiration from its amazing technical architecture and innovative features.\n\n\nFor making it straightforward to publish this documentation, the project would like to thank \nMkDocs\n and the \nMaterial for MkDocs\n theme. MkDocs generates HTML from Markdown, and does it wonderfully.\n\n\nIf you have never seen a GitHub issue and pull request template generator featuring Cthulhu and Lewis Carroll, then you should \ncheck this one out\n.\n\n\nFinally, thank \nyou\n for considering WordHat. It is a tool for developers by developers, and we hope it helps you achieve wonderful things. Thank you for making it part of your world.", 
            "title": "Credits"
        }, 
        {
            "location": "/credits/index.html#team", 
            "text": "Paul Gibbs : Project Lead  Stephen Harris : Project Lead  Richard Vodden", 
            "title": "Team"
        }, 
        {
            "location": "/credits/index.html#acknowledgements", 
            "text": "The team wish to thank the following projects and their contributors, who provide inspiration and were fantasically useful learning resources:   Stephen Harris :  stephenharris/WordPressBehatExtension  John Blackbourn :  johnbillion/WordPressBehatExtension  Tom Forrer :  tmf/WordPressExtension  Walter Dal Mut :  wdalmut/WordPressExtension  Laracasts :  laracasts/Behat-Laravel-Extension  Ariel Gold :  ari-gold/WordPress-Behat-Quickstart   Extra special thanks is extended to  Jonathan Hedstrom  and his  Behat Drupal Extension  project. Much of the structure of this project is based on Jonathan s work, and this project is forever in its debt, having taken direct inspiration from its amazing technical architecture and innovative features.  For making it straightforward to publish this documentation, the project would like to thank  MkDocs  and the  Material for MkDocs  theme. MkDocs generates HTML from Markdown, and does it wonderfully.  If you have never seen a GitHub issue and pull request template generator featuring Cthulhu and Lewis Carroll, then you should  check this one out .  Finally, thank  you  for considering WordHat. It is a tool for developers by developers, and we hope it helps you achieve wonderful things. Thank you for making it part of your world.", 
            "title": "Acknowledgements"
        }, 
        {
            "location": "/license/index.html", 
            "text": "License\n\n\nCopyright (C) 2016-present, Paul Gibbs.\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \nSee the\nGNU General Public License for more details\n.\n\n\nYou should have received a copy of the GNU General Public License\nalong with this program. If not, see \nhttp://www.gnu.org/licenses/\n.", 
            "title": "License"
        }, 
        {
            "location": "/license/index.html#license", 
            "text": "Copyright (C) 2016-present, Paul Gibbs.  This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.  This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details .  You should have received a copy of the GNU General Public License\nalong with this program. If not, see  http://www.gnu.org/licenses/ .", 
            "title": "License"
        }, 
        {
            "location": "/changelog/index.html", 
            "text": "News\n\n\nMaster branch\n\n\n\n\ntbc\n\n\n\n\n1.2.0\n - 2018-03-20\n\n\nAdded\n\n\n\n\nAll PHP exceptions now include an error code\n.\n\n\n\n\nChanged\n\n\n\n\nWP-CLI driver is more reliable at showing error messages from WP-CLI when something goes wrong.\n\n\n\n\n1.1.0\n - 2018-03-05\n\n\nAdded\n\n\n\n\nSupport for running multiple drivers simultaneously.\n\n\nMinor PHPDoc adjustments.\n\n\nMinor website updates (primary navigation changes, and robots.txt).\n\n\n\n\nChanged\n\n\n\n\nRequire WP-CLI v1.5+.\n\n\nMost of the internals now use strict typehinting.\n\n\nDrivers: the \npath\n argument is now optional.\n\n\nComposer dependencies updated to more recent versions.\n\n\n\n\nFixed\n\n\n\n\nStep \niAmViewingAuthorArchive\n now correctly accepts a user role as its parameter.\n\n\n\n\n1.0.0\n - 2018-01-18\n\n\nAdded\n\n\n\n\nNew step definitions (8 new, 7 changed, and 1 removed).\n\n\nFull test coverage for all step definitions and internal WordPress drivers.\n\n\nImproved documentation.\n\n\n\n\nChanged\n\n\n\n\nNow requires PHP 7+.\n\n\nInternal API adjustments: Contexts now only map step definitions to code, functions used by steps have been moved into traits, and drivers encapsulate \nCRUD\n operations).\n\n\nPHPDoc improvements.\n\n\nUse \nPHPStan\n for static analysis instead of Scrutinizer-CI.\n\n\nNew Docker environment for Travis CI; increases build confidence and reliability.\n\n\n\n\nFixed\n\n\n\n\nMany issues discovered by completing our own test coverage.\n\n\nAppVeyor fixes.\n\n\n\n\n0.9.2\n - 2017-12-18\n\n\nFixed\n\n\n\n\nFix (more) invalid YAML.\n\n\n\n\n0.9.1\n - 2017-12-14\n\n\nFixed\n\n\n\n\nFix invalid YAML in services.yml.\n\n\n\n\n0.9.0\n - 2017-10-09\n\n\nChanged\n\n\n\n\nPHPDoc updated/tweaked.\n\n\nRename some \nPageObjects\n classes for internal consistency.\n\n\n\n\nFixed\n\n\n\n\nFix return value when creating users.\n\n\nFix creating content with terms or meta, with WP-CLI driver.\n\n\n\n\nRemoved\n\n\n\n\nRemoved unused internal function \nisWordpressError()\n.\n\n\nRemoved Composer package \nroave/security-advisories\n.\n\n\nRemoved unused Context class.\n\n\n\n\n0.8.0\n - 2017-09-18\n\n\nAdded\n\n\n\n\nFinished implementing database content rollback options; consult documentation.\n\n\n\n\nChanged\n\n\n\n\nWordHat now requires PHP 7.0+.\n\n\nRenamed \nWP-API\n driver to \nWP-PHP\n (backwards-compatible, as long as you have not extended driver classes).\n\n\nWebsite; significant documentation update, especially for on-boarding new users.\n\n\nPath\n setting can now be a relative or absolute path. Previously, only absolute paths were supported.\n\n\n\n\nFixed\n\n\n\n\nWebsite; mkdocs-material theme update to latest version (accessibility fixes).\n\n\nVarious PHPDoc improvements and corrections.\n\n\n\n\n0.7.1\n - 2017-08-21\n\n\nChanged\n\n\n\n\nPath\n setting can now be a relative or absolute path. Previously, only absolute paths were supported.\n\n\n\n\n0.7.0\n - 2017-06-30\n\n\nAdded\n\n\n\n\nContentEditor\n and \nPostContentEditor\n page (element) objects for interacting with TinyMCE elements.\n\n\nEditPostContext\n.\n\n\nWidgetContext\n.\n\n\nAdd optional \nredirect_to\n param to \nlogIn()\n.\n\n\n\n\nChanged\n\n\n\n\nDriver interface re-organisation. See \n#21\n.\n\n\n\n\nFixed\n\n\n\n\nIf a browser window is not open when the \nBeforeStep\n event is run, then our call to Selenium2Driver::executeScript() will throw an exception.\n\n\nCompatibility with WordPress 4.8.\n\n\nToolbar page object: fix calls to \nevaluateScript\n.\n\n\nStrict version requirement for WP-CLI.\n\n\nLinks and buttons behind the WordPress\n Toolbar cannot be interacted with.\n\n\n\n\nDeprecated\n\n\n\n\nRename \nis_wordpress_error()\n to \nisWordPressError()\n.\n\n\n\n\n0.6.0\n - 2017-04-05\n\n\nAdded\n\n\n\n\nInitial support for \nsensiolabs/behat-page-object-extension\n with support for parts of wp-admin, and the Toolbar.\n\n\n\n\nChanged\n\n\n\n\nDocumentation corrections; website and PHPDoc.\n\n\nWP-CLI driver no longer fails if the command returns text through stdout.\n\n\nTravis-CI reports job status to our Slack; join us at \nhttps://wordhat.herokuapp.com\n \ud83d\ude00\n\n\nComposer requirements loosened for better compatibility with other projects.\n\n\n\n\nFixed\n\n\n\n\nTravis-CI tasks now succesfully run on Github forks of the project.\n\n\nAttempts made to improve intermittent failures with the log-in action when run with Selenium. Work-in-progress.\n\n\nRegex correction for \ngiven\n block for \nContentContext-\nthereArePosts()\n.\n\n\n\n\nDeprecated\n\n\n\n\nisWordpressError()\n moved into \nUtil\n namespace.\n\n\n\n\n0.5.0\n - 2017-02-08\n\n\nAdded\n\n\n\n\nPHPCS rules.\n\n\nScrutinizer-CI integration.\n\n\n\n\nChanged\n\n\n\n\nWebsite; switched from Couscous to MkDocs.\n\n\nDocumentation.\n\n\nTravis-CI tweaks.\n\n\n\n\nFixed\n\n\n\n\nMiscellanous driver fixes, especially WP-CLI over SSH. Again.\n\n\n\n\n0.4.0\n - 2017-01-30\n\n\nAdded\n\n\n\n\nIntroduce \nsensiolabs/behat-page-object-extension\n for future development.\n\n\n\n\nFixed\n\n\n\n\nMiscellanous driver fixes, especially WP-CLI over SSH.\n\n\n\n\nChanged\n\n\n\n\nDocumentation.\n\n\nWebsite design and performance improvements.\n\n\nTravis-CI improvements.\n\n\n\n\n0.3.0\n - 2017-01-07\n\n\nAdded\n\n\n\n\nMiscellanous driver fixes.\n\n\nFirst pass at Contexts.\n\n\n\n\nChanged\n\n\n\n\nDocumentation.\n\n\n\n\n0.2.0\n - 2016-11-26\n\n\nAdded\n\n\n\n\nWP-API and blackbox drivers.\n\n\nWebsite/documentation.\n\n\nDatabase import/export methods to drivers.\n\n\n\n\nChanged\n\n\n\n\nAdjusted exceptions thrown by DriverManager and Drivers.\n\n\nDesign adjustments to website.\n\n\n\n\nFixed\n\n\n\n\nMiscellanous WP-CLI driver fixes.\n\n\n\n\n0.1.0\n - 2016-09-22\n\n\nAdded\n\n\n\n\nFirst working version of basic architecture.", 
            "title": "News"
        }, 
        {
            "location": "/changelog/index.html#news", 
            "text": "", 
            "title": "News"
        }, 
        {
            "location": "/changelog/index.html#master-branch", 
            "text": "tbc", 
            "title": "Master branch"
        }, 
        {
            "location": "/changelog/index.html#120-2018-03-20", 
            "text": "", 
            "title": "1.2.0 - 2018-03-20"
        }, 
        {
            "location": "/changelog/index.html#added", 
            "text": "All PHP exceptions now include an error code .", 
            "title": "Added"
        }, 
        {
            "location": "/changelog/index.html#changed", 
            "text": "WP-CLI driver is more reliable at showing error messages from WP-CLI when something goes wrong.", 
            "title": "Changed"
        }, 
        {
            "location": "/changelog/index.html#110-2018-03-05", 
            "text": "", 
            "title": "1.1.0 - 2018-03-05"
        }, 
        {
            "location": "/changelog/index.html#added_1", 
            "text": "Support for running multiple drivers simultaneously.  Minor PHPDoc adjustments.  Minor website updates (primary navigation changes, and robots.txt).", 
            "title": "Added"
        }, 
        {
            "location": "/changelog/index.html#changed_1", 
            "text": "Require WP-CLI v1.5+.  Most of the internals now use strict typehinting.  Drivers: the  path  argument is now optional.  Composer dependencies updated to more recent versions.", 
            "title": "Changed"
        }, 
        {
            "location": "/changelog/index.html#fixed", 
            "text": "Step  iAmViewingAuthorArchive  now correctly accepts a user role as its parameter.", 
            "title": "Fixed"
        }, 
        {
            "location": "/changelog/index.html#100-2018-01-18", 
            "text": "", 
            "title": "1.0.0 - 2018-01-18"
        }, 
        {
            "location": "/changelog/index.html#added_2", 
            "text": "New step definitions (8 new, 7 changed, and 1 removed).  Full test coverage for all step definitions and internal WordPress drivers.  Improved documentation.", 
            "title": "Added"
        }, 
        {
            "location": "/changelog/index.html#changed_2", 
            "text": "Now requires PHP 7+.  Internal API adjustments: Contexts now only map step definitions to code, functions used by steps have been moved into traits, and drivers encapsulate  CRUD  operations).  PHPDoc improvements.  Use  PHPStan  for static analysis instead of Scrutinizer-CI.  New Docker environment for Travis CI; increases build confidence and reliability.", 
            "title": "Changed"
        }, 
        {
            "location": "/changelog/index.html#fixed_1", 
            "text": "Many issues discovered by completing our own test coverage.  AppVeyor fixes.", 
            "title": "Fixed"
        }, 
        {
            "location": "/changelog/index.html#092-2017-12-18", 
            "text": "", 
            "title": "0.9.2 - 2017-12-18"
        }, 
        {
            "location": "/changelog/index.html#fixed_2", 
            "text": "Fix (more) invalid YAML.", 
            "title": "Fixed"
        }, 
        {
            "location": "/changelog/index.html#091-2017-12-14", 
            "text": "", 
            "title": "0.9.1 - 2017-12-14"
        }, 
        {
            "location": "/changelog/index.html#fixed_3", 
            "text": "Fix invalid YAML in services.yml.", 
            "title": "Fixed"
        }, 
        {
            "location": "/changelog/index.html#090-2017-10-09", 
            "text": "", 
            "title": "0.9.0 - 2017-10-09"
        }, 
        {
            "location": "/changelog/index.html#changed_3", 
            "text": "PHPDoc updated/tweaked.  Rename some  PageObjects  classes for internal consistency.", 
            "title": "Changed"
        }, 
        {
            "location": "/changelog/index.html#fixed_4", 
            "text": "Fix return value when creating users.  Fix creating content with terms or meta, with WP-CLI driver.", 
            "title": "Fixed"
        }, 
        {
            "location": "/changelog/index.html#removed", 
            "text": "Removed unused internal function  isWordpressError() .  Removed Composer package  roave/security-advisories .  Removed unused Context class.", 
            "title": "Removed"
        }, 
        {
            "location": "/changelog/index.html#080-2017-09-18", 
            "text": "", 
            "title": "0.8.0 - 2017-09-18"
        }, 
        {
            "location": "/changelog/index.html#added_3", 
            "text": "Finished implementing database content rollback options; consult documentation.", 
            "title": "Added"
        }, 
        {
            "location": "/changelog/index.html#changed_4", 
            "text": "WordHat now requires PHP 7.0+.  Renamed  WP-API  driver to  WP-PHP  (backwards-compatible, as long as you have not extended driver classes).  Website; significant documentation update, especially for on-boarding new users.  Path  setting can now be a relative or absolute path. Previously, only absolute paths were supported.", 
            "title": "Changed"
        }, 
        {
            "location": "/changelog/index.html#fixed_5", 
            "text": "Website; mkdocs-material theme update to latest version (accessibility fixes).  Various PHPDoc improvements and corrections.", 
            "title": "Fixed"
        }, 
        {
            "location": "/changelog/index.html#071-2017-08-21", 
            "text": "", 
            "title": "0.7.1 - 2017-08-21"
        }, 
        {
            "location": "/changelog/index.html#changed_5", 
            "text": "Path  setting can now be a relative or absolute path. Previously, only absolute paths were supported.", 
            "title": "Changed"
        }, 
        {
            "location": "/changelog/index.html#070-2017-06-30", 
            "text": "", 
            "title": "0.7.0 - 2017-06-30"
        }, 
        {
            "location": "/changelog/index.html#added_4", 
            "text": "ContentEditor  and  PostContentEditor  page (element) objects for interacting with TinyMCE elements.  EditPostContext .  WidgetContext .  Add optional  redirect_to  param to  logIn() .", 
            "title": "Added"
        }, 
        {
            "location": "/changelog/index.html#changed_6", 
            "text": "Driver interface re-organisation. See  #21 .", 
            "title": "Changed"
        }, 
        {
            "location": "/changelog/index.html#fixed_6", 
            "text": "If a browser window is not open when the  BeforeStep  event is run, then our call to Selenium2Driver::executeScript() will throw an exception.  Compatibility with WordPress 4.8.  Toolbar page object: fix calls to  evaluateScript .  Strict version requirement for WP-CLI.  Links and buttons behind the WordPress  Toolbar cannot be interacted with.", 
            "title": "Fixed"
        }, 
        {
            "location": "/changelog/index.html#deprecated", 
            "text": "Rename  is_wordpress_error()  to  isWordPressError() .", 
            "title": "Deprecated"
        }, 
        {
            "location": "/changelog/index.html#060-2017-04-05", 
            "text": "", 
            "title": "0.6.0 - 2017-04-05"
        }, 
        {
            "location": "/changelog/index.html#added_5", 
            "text": "Initial support for  sensiolabs/behat-page-object-extension  with support for parts of wp-admin, and the Toolbar.", 
            "title": "Added"
        }, 
        {
            "location": "/changelog/index.html#changed_7", 
            "text": "Documentation corrections; website and PHPDoc.  WP-CLI driver no longer fails if the command returns text through stdout.  Travis-CI reports job status to our Slack; join us at  https://wordhat.herokuapp.com  \ud83d\ude00  Composer requirements loosened for better compatibility with other projects.", 
            "title": "Changed"
        }, 
        {
            "location": "/changelog/index.html#fixed_7", 
            "text": "Travis-CI tasks now succesfully run on Github forks of the project.  Attempts made to improve intermittent failures with the log-in action when run with Selenium. Work-in-progress.  Regex correction for  given  block for  ContentContext- thereArePosts() .", 
            "title": "Fixed"
        }, 
        {
            "location": "/changelog/index.html#deprecated_1", 
            "text": "isWordpressError()  moved into  Util  namespace.", 
            "title": "Deprecated"
        }, 
        {
            "location": "/changelog/index.html#050-2017-02-08", 
            "text": "", 
            "title": "0.5.0 - 2017-02-08"
        }, 
        {
            "location": "/changelog/index.html#added_6", 
            "text": "PHPCS rules.  Scrutinizer-CI integration.", 
            "title": "Added"
        }, 
        {
            "location": "/changelog/index.html#changed_8", 
            "text": "Website; switched from Couscous to MkDocs.  Documentation.  Travis-CI tweaks.", 
            "title": "Changed"
        }, 
        {
            "location": "/changelog/index.html#fixed_8", 
            "text": "Miscellanous driver fixes, especially WP-CLI over SSH. Again.", 
            "title": "Fixed"
        }, 
        {
            "location": "/changelog/index.html#040-2017-01-30", 
            "text": "", 
            "title": "0.4.0 - 2017-01-30"
        }, 
        {
            "location": "/changelog/index.html#added_7", 
            "text": "Introduce  sensiolabs/behat-page-object-extension  for future development.", 
            "title": "Added"
        }, 
        {
            "location": "/changelog/index.html#fixed_9", 
            "text": "Miscellanous driver fixes, especially WP-CLI over SSH.", 
            "title": "Fixed"
        }, 
        {
            "location": "/changelog/index.html#changed_9", 
            "text": "Documentation.  Website design and performance improvements.  Travis-CI improvements.", 
            "title": "Changed"
        }, 
        {
            "location": "/changelog/index.html#030-2017-01-07", 
            "text": "", 
            "title": "0.3.0 - 2017-01-07"
        }, 
        {
            "location": "/changelog/index.html#added_8", 
            "text": "Miscellanous driver fixes.  First pass at Contexts.", 
            "title": "Added"
        }, 
        {
            "location": "/changelog/index.html#changed_10", 
            "text": "Documentation.", 
            "title": "Changed"
        }, 
        {
            "location": "/changelog/index.html#020-2016-11-26", 
            "text": "", 
            "title": "0.2.0 - 2016-11-26"
        }, 
        {
            "location": "/changelog/index.html#added_9", 
            "text": "WP-API and blackbox drivers.  Website/documentation.  Database import/export methods to drivers.", 
            "title": "Added"
        }, 
        {
            "location": "/changelog/index.html#changed_11", 
            "text": "Adjusted exceptions thrown by DriverManager and Drivers.  Design adjustments to website.", 
            "title": "Changed"
        }, 
        {
            "location": "/changelog/index.html#fixed_10", 
            "text": "Miscellanous WP-CLI driver fixes.", 
            "title": "Fixed"
        }, 
        {
            "location": "/changelog/index.html#010-2016-09-22", 
            "text": "", 
            "title": "0.1.0 - 2016-09-22"
        }, 
        {
            "location": "/changelog/index.html#added_10", 
            "text": "First working version of basic architecture.", 
            "title": "Added"
        }, 
        {
            "location": "/credits/index.html", 
            "text": "Team\n\n\n\n\nPaul Gibbs\n: Project Lead\n\n\nStephen Harris\n: Project Lead\n\n\nRichard Vodden\n\n\n\n\nAcknowledgements\n\n\nThe team wish to thank the following projects and their contributors, who provide inspiration and were fantasically useful learning resources:\n\n\n\n\nStephen Harris\n: \nstephenharris/WordPressBehatExtension\n\n\nJohn Blackbourn\n: \njohnbillion/WordPressBehatExtension\n\n\nTom Forrer\n: \ntmf/WordPressExtension\n\n\nWalter Dal Mut\n: \nwdalmut/WordPressExtension\n\n\nLaracasts\n: \nlaracasts/Behat-Laravel-Extension\n\n\nAriel Gold\n: \nari-gold/WordPress-Behat-Quickstart\n\n\n\n\nExtra special thanks is extended to \nJonathan Hedstrom\n and his \nBehat Drupal Extension\n project. Much of the structure of this project is based on Jonathan\ns work, and this project is forever in its debt, having taken direct inspiration from its amazing technical architecture and innovative features.\n\n\nFor making it straightforward to publish this documentation, the project would like to thank \nMkDocs\n and the \nMaterial for MkDocs\n theme. MkDocs generates HTML from Markdown, and does it wonderfully.\n\n\nIf you have never seen a GitHub issue and pull request template generator featuring Cthulhu and Lewis Carroll, then you should \ncheck this one out\n.\n\n\nFinally, thank \nyou\n for considering WordHat. It is a tool for developers by developers, and we hope it helps you achieve wonderful things. Thank you for making it part of your world.", 
            "title": "Credits"
        }, 
        {
            "location": "/credits/index.html#team", 
            "text": "Paul Gibbs : Project Lead  Stephen Harris : Project Lead  Richard Vodden", 
            "title": "Team"
        }, 
        {
            "location": "/credits/index.html#acknowledgements", 
            "text": "The team wish to thank the following projects and their contributors, who provide inspiration and were fantasically useful learning resources:   Stephen Harris :  stephenharris/WordPressBehatExtension  John Blackbourn :  johnbillion/WordPressBehatExtension  Tom Forrer :  tmf/WordPressExtension  Walter Dal Mut :  wdalmut/WordPressExtension  Laracasts :  laracasts/Behat-Laravel-Extension  Ariel Gold :  ari-gold/WordPress-Behat-Quickstart   Extra special thanks is extended to  Jonathan Hedstrom  and his  Behat Drupal Extension  project. Much of the structure of this project is based on Jonathan s work, and this project is forever in its debt, having taken direct inspiration from its amazing technical architecture and innovative features.  For making it straightforward to publish this documentation, the project would like to thank  MkDocs  and the  Material for MkDocs  theme. MkDocs generates HTML from Markdown, and does it wonderfully.  If you have never seen a GitHub issue and pull request template generator featuring Cthulhu and Lewis Carroll, then you should  check this one out .  Finally, thank  you  for considering WordHat. It is a tool for developers by developers, and we hope it helps you achieve wonderful things. Thank you for making it part of your world.", 
            "title": "Acknowledgements"
        }, 
        {
            "location": "/license/index.html", 
            "text": "License\n\n\nCopyright (C) 2016-present, Paul Gibbs.\n\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. \nSee the\nGNU General Public License for more details\n.\n\n\nYou should have received a copy of the GNU General Public License\nalong with this program. If not, see \nhttp://www.gnu.org/licenses/\n.", 
            "title": "License"
        }, 
        {
            "location": "/license/index.html#license", 
            "text": "Copyright (C) 2016-present, Paul Gibbs.  This program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.  This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details .  You should have received a copy of the GNU General Public License\nalong with this program. If not, see  http://www.gnu.org/licenses/ .", 
            "title": "License"
        }
    ]
}